#include <iostream>
#include "Nivel_4.h"
using namespace std;

Nivel_4::Nivel_4()
{
    for(i=1; i<=3; i++)
        for(j=1; j<=3; j++)
            a[i][j]='#';

}

Nivel_4::castigsauegalit()
{
    int egalit,i,j;
    //Prima linie
    if(a[1][1]=='X'&&a[1][2]=='X'&&a[1][3]=='X')
        return 1;

    if(a[1][1]=='O'&&a[1][2]=='O'&&a[1][3]=='O')
        return 2;



    // A doua linie
    if(a[2][1]=='X'&&a[2][2]=='X'&&a[2][3]=='X')
        return 1;


    if(a[2][1]=='O'&&a[2][2]=='O'&&a[2][3]=='O')
        return 2;


    //A treia linie
    if(a[3][1]=='X'&&a[3][2]=='X'&&a[3][3]=='X')
        return 1;


    if(a[3][1]=='O'&&a[3][2]=='O'&&a[3][3]=='O')
        return 2;


    //Prima coloana
    if(a[1][1]=='X'&&a[2][1]=='X'&&a[3][1]=='X')
        return 1;


    if(a[1][1]=='O'&&a[2][1]=='O'&&a[3][1]=='O')
        return 2;



    //A doua coloana
    if(a[1][2]=='X'&&a[2][2]=='X'&&a[3][2]=='X')
        return 1;


    if(a[1][2]=='O'&&a[2][2]=='O'&&a[3][2]=='O')
        return 2;



    //A treia coloana
    if(a[1][3]=='X'&&a[2][3]=='X'&&a[3][3]=='X')
        return 1;


    if(a[1][3]=='O'&&a[2][3]=='O'&&a[3][3]=='O')
        return 2;



    //Diagonala principala


    if(a[1][1]=='X'&&a[2][2]=='X'&&a[3][3]=='X')
        return 1;


    if(a[1][1]=='O'&&a[2][2]=='O'&&a[3][3]=='O')
        return 2;


    //Diagonala secundara


    if(a[1][3]=='X'&&a[2][2]=='X'&&a[3][1]=='X')
        return 1;


    if(a[1][3]=='O'&&a[2][2]=='O'&&a[3][1]=='O')
        return 2 ;



    egalit=1;
    for(i=1; i<=3; i++)
        for(j=1; j<=3; j++)
            if(a[i][j]=='#')
                egalit=0;

    if(egalit==1)
        return 3;

    return 0;

/// 1=castiga X;
/// 2=castiga O;
/// 3=egalitate;
}

Nivel_4::Caut_pt_O()
{
    //Verific pt O prima linie
    if(a[1][1]=='O'&&a[1][3]=='O')
        if(a[1][2]=='#')
        {
            // a[1][2]='O';
            return 12;
        }


    if(a[1][1]=='O'&& a[1][2]=='O')
        if(a[1][3]=='#')
        {
            // a[1][3]='O';
            return 13;
        }


    if(a[1][2]=='O'&& a[1][3]=='O')
        if(a[1][1]=='#')
        {
            // a[1][1]='O';
            return 11;
        }



    //Verific pt O a doua linie
    if(a[2][1]=='O'&&a[2][3]=='O')
        if(a[2][2]=='#')
        {
            // a[2][2]='O';
            return 22;

        }

    if(a[2][1]=='O'&& a[2][2]=='O')
        if(a[2][3]=='#')
        {
            // a[2][3]='O';
            return 23;
        }


    if(a[2][2]=='O'&& a[2][3]=='O')
        if(a[2][1]=='#')
        {
            //a[2][1]='O';
            return 21;
        }


    //Verific pt O a treia linie
    if(a[3][1]=='O'&&a[3][3]=='O')
        if(a[3][2]=='#')
        {
            // a[3][2]='O';
            return 32;
        }


    if(a[3][1]=='O'&& a[3][2]=='O')
        if(a[3][3]=='#')
        {
            // a[3][3]='O';
            return 33;
        }


    if(a[3][2]=='O'&& a[3][3]=='O')
        if(a[3][1]=='#')
        {
            // a[3][1]='O';
            return 31;
        }


    //Verific pt O prima coloana
    if(a[1][1]=='O'&&a[3][1]=='O')
        if(a[2][1]=='#')
        {
            //a[2][1]='O';
            return 21;
        }


    if(a[1][1]=='O'&& a[2][1]=='O')
        if(a[3][1]=='#')
        {
            // a[3][1]='O';
            return 31;
        }


    if(a[2][1]=='O'&& a[3][1]=='O')
        if(a[1][1]=='#')
        {
            // a[1][1]='O';
            return 11;
        }


    //Verific pt O a doua coloana
    if(a[1][2]=='O'&&a[3][2]=='O')
        if(a[2][2]=='#')
        {
            //a[2][2]='O';
            return 22;
        }


    if(a[1][2]=='O'&& a[2][2]=='O')
        if(a[3][2]=='#')
        {
            //  a[3][2]='O';
            return 32;
        }


    if(a[2][3]=='O'&& a[3][2]=='O')
        if(a[1][2]=='#')
        {
            // a[1][2]='O';
            return 12;
        }


    //Verific pt O a treia coloana
    if(a[1][3]=='O'&&a[3][3]=='O')
        if(a[2][3]=='#')
        {
            //    a[2][3]='O';
            return 23;
        }


    if(a[1][3]=='O'&& a[2][3]=='O')
        if(a[3][3]=='#')
        {
            // a[3][3]='O';
            return 33;
        }


    if(a[2][3]=='O'&& a[3][3]=='O')
        if(a[1][3]=='#')
        {
            //a[1][3]='O';
            return 13;
        }


    //Verific pt O diagonala principala
    if(a[1][1]=='O'&&a[3][3]=='O')
        if(a[2][2]=='#')
        {
            // a[2][2]='O';
            return 22;
        }


    if(a[1][1]=='O'&& a[2][2]=='O')
        if(a[3][3]=='#')
        {
            //a[3][3]='O';
            return 33;
        }


    if(a[2][2]=='O'&& a[3][3]=='O')
        if(a[1][1]=='#')
        {
            //a[1][1]='O';
            return 11;
        }


    //Verific pt O diagonala secundara
    if(a[1][3]=='O'&&a[3][1]=='O')
        if(a[2][2]=='#')
        {
            //a[2][2]='O';
            return 22;
        }


    if(a[1][3]=='O'&& a[2][2]=='O')
        if(a[3][1]=='#')
        {
            //a[3][1]='O';
            return 31;
        }


    if(a[2][2]=='O'&& a[3][1]=='O')
        if(a[1][3]=='#')
        {
            //a[1][3]='O';
            return 13;
        }

    return 0;


}

Nivel_4::Liber_pt_O()
{
    //Verific pt O prima linie
    if(a[1][1]=='O'&&a[1][3]=='#')
        if(a[1][2]=='#')
        {
            // a[1][2]='O';
            return 12;
        }


    if(a[1][1]=='O'&& a[1][2]=='#')
        if(a[1][3]=='#')
        {
            // a[1][3]='O';
            return 13;
        }


    if(a[1][2]=='O'&& a[1][3]=='#')
        if(a[1][1]=='#')
        {
            // a[1][1]='O';
            return 11;
        }



    //Verific pt O a doua linie
    if(a[2][1]=='O'&&a[2][3]=='#')
        if(a[2][2]=='#')
        {
            // a[2][2]='O';
            return 22;

        }

    if(a[2][1]=='O'&& a[2][2]=='#')
        if(a[2][3]=='#')
        {
            // a[2][3]='O';
            return 23;
        }


    if(a[2][2]=='O'&& a[2][3]=='#')
        if(a[2][1]=='#')
        {
            //a[2][1]='O';
            return 21;
        }


    //Verific pt O a treia linie
    if(a[3][1]=='O'&&a[3][3]=='#')
        if(a[3][2]=='#')
        {
            // a[3][2]='O';
            return 32;
        }


    if(a[3][1]=='O'&& a[3][2]=='#')
        if(a[3][3]=='#')
        {
            // a[3][3]='O';
            return 33;
        }


    if(a[3][2]=='O'&& a[3][3]=='#')
        if(a[3][1]=='#')
        {
            // a[3][1]='O';
            return 31;
        }


    //Verific pt O prima coloana
    if(a[1][1]=='O'&&a[3][1]=='#')
        if(a[2][1]=='#')
        {
            //a[2][1]='O';
            return 21;
        }


    if(a[1][1]=='O'&& a[2][1]=='#')
        if(a[3][1]=='#')
        {
            // a[3][1]='O';
            return 31;
        }


    if(a[2][1]=='O'&& a[3][1]=='#')
        if(a[1][1]=='#')
        {
            // a[1][1]='O';
            return 11;
        }


    //Verific pt O a doua coloana
    if(a[1][2]=='O'&&a[3][2]=='#')
        if(a[2][2]=='#')
        {
            //a[2][2]='O';
            return 22;
        }


    if(a[1][2]=='O'&& a[2][2]=='#')
        if(a[3][2]=='#')
        {
            //  a[3][2]='O';
            return 32;
        }


    if(a[2][3]=='O'&& a[3][2]=='#')
        if(a[1][2]=='#')
        {
            // a[1][2]='O';
            return 12;
        }


    //Verific pt O a treia coloana
    if(a[1][3]=='O'&&a[3][3]=='#')
        if(a[2][3]=='#')
        {
            //    a[2][3]='O';
            return 23;
        }


    if(a[1][3]=='O'&& a[2][3]=='#')
        if(a[3][3]=='#')
        {
            // a[3][3]='O';
            return 33;
        }


    if(a[2][3]=='O'&& a[3][3]=='#')
        if(a[1][3]=='#')
        {
            //a[1][3]='O';
            return 13;
        }


    //Verific pt O diagonala principala
    if(a[1][1]=='O'&&a[3][3]=='#')
        if(a[2][2]=='#')
        {
            // a[2][2]='O';
            return 22;
        }


    if(a[1][1]=='O'&& a[2][2]=='#')
        if(a[3][3]=='#')
        {
            //a[3][3]='O';
            return 33;
        }


    if(a[2][2]=='O'&& a[3][3]=='#')
        if(a[1][1]=='#')
        {
            //a[1][1]='O';
            return 11;
        }


    //Verific pt O diagonala secundara
    if(a[1][3]=='O'&&a[3][1]=='#')
        if(a[2][2]=='#')
        {
            //a[2][2]='O';
            return 22;
        }


    if(a[1][3]=='O'&& a[2][2]=='#')
        if(a[3][1]=='#')
        {
            //a[3][1]='O';
            return 31;
        }


    if(a[2][2]=='O'&& a[3][1]=='#')
        if(a[1][3]=='#')
        {
            //a[1][3]='O';
            return 13;
        }


    return 0;
}

Nivel_4::Strategie()
{
    if((a[2][3]=='X'&&a[3][2]=='X'&&a[3][1]=='#'&&a[1][3]=='#')||(a[2][3]=='O'&&a[3][2]=='O'&&a[3][1]=='#'&&a[1][3]=='#')) ///1.
        if(a[3][3]=='#')
            return 33;


    if((a[1][3]=='X'&&a[3][2]=='X'&&a[3][1]=='#'&&a[2][3]=='#')||(a[1][3]=='O'&&a[3][2]=='O'&&a[3][1]=='#'&&a[2][3]=='#'))///2
        if(a[3][3]=='#')
            return 33;



    if((a[2][1]=='X'&&a[3][2]=='X'&&a[3][3]=='#'&&a[1][1]=='#')||(a[2][1]=='O'&&a[3][2]=='O'&&a[3][3]=='#'&&a[1][1]=='#'))///3
        if(a[3][1]=='#')
            return 31;



    if((a[1][1]=='X'&&a[3][2]=='X'&&a[2][1]=='#'&&a[3][3]=='#')||(a[1][1]=='O'&&a[3][2]=='O'&&a[2][1]=='#'&&a[3][3]=='#'))///4
        if(a[3][1]=='#')
            return 31;



    if((a[1][2]=='X'&&a[2][1]=='X'&&a[3][1]=='#'&&a[1][3]=='#')||(a[1][2]=='O'&&a[2][1]=='O'&&a[3][1]=='#'&&a[1][3]=='#'))///5
        if(a[1][1]=='#')
            return 11;



    if((a[1][2]=='X'&&a[3][1]=='X'&&a[2][1]=='#'&&a[1][3]=='#')||(a[1][2]=='O'&&a[3][1]=='O'&&a[2][1]=='#'&&a[1][3]=='#'))///6
        if(a[1][1]=='#')
            return 11;




    if((a[1][2]=='X'&&a[2][3]=='X'&&a[1][1]=='#'&&a[3][3]=='#')||(a[1][2]=='O'&&a[2][3]=='O'&&a[1][1]=='#'&&a[3][3]=='#'))///7
        if(a[1][3]=='#')
            return 13;




    if((a[1][1]=='X'&&a[2][3]=='X'&&a[1][2]=='#'&&a[3][3]=='#')||(a[1][1]=='O'&&a[2][3]=='O'&&a[1][2]=='#'&&a[3][3]=='#'))///8
        if(a[1][3]=='#')
            return 13;

    return 0;

}

Nivel_4::Blocare_X_1()
{
    //Verific diagonala principala
    if(a[1][1]=='X'&&a[2][2]=='X')
    {
        if(a[3][3]=='#')
        {
            return 33;
        }


    }


    if(a[2][2]=='X'&&a[3][3]=='X')
    {
        if(a[1][1]=='#')
        {
            return 11;
        }

    }



    if(a[1][1]=='X'&& a[3][3]=='X')
    {
        if(a[2][2]=='#')
        {
            return 22;
        }


    }


    //Verific prima coloana
    if(a[1][1]=='X'&&a[2][1]=='X')
    {
        if(a[3][1]=='#')
        {
            return 31;
        }

    }



    if(a[2][1]=='X'&&a[3][1]=='X')
    {
        if(a[1][1]=='#')
        {
            return 11;
        }

    }


    if(a[1][1]=='X'&& a[3][1]=='X')
    {
        if(a[2][1]=='#')
        {
            return 21;
        }

    }

    //Verific a doua coloana
    if(a[1][2]=='X'&&a[2][2]=='X')
    {
        if(a[3][2]=='#')
        {
            return 32;
        }

    }


    if(a[2][2]=='X'&&a[3][2]=='X')
    {
        if(a[1][2]=='#')
        {
            return 12;
        }

    }




    //Verific a doua linie
    if(a[2][1]=='X'&&a[2][2]=='X')
    {
        if(a[2][3]=='#')
        {
            return 23;
        }

    }


    if(a[2][2]=='X'&&a[2][3]=='X')
    {
        if(a[2][1]=='#')
        {
            return 21;
        }

    }



    //Verific a treia linie
    if(a[3][1]=='X'&&a[3][2]=='X')
    {
        if(a[3][3]=='#')
        {
            return 33;
        }

    }


    if(a[3][2]=='X'&&a[3][3]=='X')
    {
        if(a[3][1]=='#')
        {
            return 31;
        }

    }

    if(a[3][1]=='X'&& a[3][3]=='X')
    {
        if(a[3][2]=='#')
        {
            return 32;
        }

    }

    return 0;

}

Nivel_4::Blocare_X_2()
{
    //Verific prima linie
    if(a[1][1]=='X'&&a[1][2]=='X')
    {
        if(a[1][3]=='#')
        {
            return 13;
        }

    }

    if(a[1][2]=='X'&&a[1][3]=='X')
    {

        if(a[1][1]=='#')
        {
            return 11;
        }

    }


    if(a[1][1]=='X'&& a[1][3]=='X')
    {
        if(a[1][2]=='#')

        {
            return 12;
        }

    }


    //Verific a treia linie
    if(a[3][1]=='X'&&a[3][2]=='X')
    {
        if(a[3][3]=='#')
        {
            return 33;
        }

    }


    if(a[3][2]=='X'&&a[3][3]=='X')
    {
        if(a[3][1]=='#')
        {
            return 31;
        }

    }


    if(a[3][1]=='X'&& a[3][3]=='X')
    {
        if(a[3][2]=='#')
        {
            return 32;
        }

    }


    //Verific prima coloana
    if(a[1][1]=='X'&&a[2][1]=='X')
    {

        if(a[3][1]=='#')
        {
            return 31;
        }

    }

    if(a[2][1]=='X'&&a[3][1]=='X')
    {

        if(a[1][1]=='#')
        {
            return 11;
        }

    }



    if(a[1][1]=='X'&& a[3][1]=='X')
    {
        if(a[2][1]=='#')
        {
            return 21;
        }
    }


    //Verific a treia coloana

    if(a[1][3]=='X'&&a[2][3]=='X')
    {
        if(a[3][3]=='#')
        {
            return 33;
        }

    }



    if(a[2][3]=='X'&&a[3][3]=='X')
    {
        if(a[1][3]=='#')
        {
            return 13;
        }

    }


    if(a[1][3]=='X'&& a[3][3]=='X')
    {
        if(a[2][3]=='#')
        {
            return 23;
        }

    }


    return 0;

}

Nivel_4::Combinatii()
{
    ///Combinatii caz I
    b[22][31]=33;  ///a)
    b[31][22]=33;
    b[22][33]=11;  ///b)
    b[33][22]=11;
    b[11][22]=33;  ///c)
    b[22][11]=33;
    b[22][12]=32;  ///d)
    b[12][22]=32;
    b[22][21]=23;  ///e)
    b[21][22]=23;
    b[22][32]=12;  ///f)
    b[32][22]=12;
    b[22][23]=21;  ///g)
    b[23][22]=21;

    ///Combinatii caz II
    b[31][32]=33;///a1)
    b[32][31]=33;
    b[31][33]=32;///b1)
    b[33][31]=32;
    b[31][23]=32;///c1)
    b[23][31]=32;
    b[31][13]=21;///d1)
    b[13][31]=21;
    b[31][12]=11;///e1)
    b[12][31]=11;
    b[31][11]=21;///f1)
    b[11][31]=21;
    b[31][21]=11;///g1)
    b[21][31]=11;

    b[32][31]=33;///a2)
    b[31][32]=33;
    b[32][33]=31;///b2)
    b[33][32]=31;
    b[32][23]=33;///c2)
    b[23][32]=33;
    b[32][13]=23;///d2)
    b[13][32]=23;
    b[32][12]=11;///e2)
    b[12][32]=11;
    b[32][11]=21;///f2)
    b[11][32]=21;
    b[32][21]=31;///g2)
    b[21][32]=31;

    b[33][31]=32;///a3)
    b[31][33]=32;
    b[33][32]=31;///b3)
    b[32][33]=31;
    b[33][23]=13;///c3)
    b[23][33]=13;
    b[33][13]=23;///d3)
    b[13][33]=23;
    b[33][12]=13;///e3)
    b[12][33]=13;
    b[33][11]=12;///f3)
    b[11][33]=12;
    b[33][21]=32;///g3)
    b[21][33]=32;

    b[23][31]=33;///a4)
    b[31][23]=33;
    b[23][32]=33;///b4)
    b[32][23]=33;
    b[23][33]=13;///c4)
    b[33][23]=13;
    b[23][13]=33;///d4)
    b[13][23]=33;
    b[23][12]=13;///e4)
    b[12][23]=13;
    b[23][11]=13;///f4)
    b[11][23]=13;
    b[23][21]=32;///g4)
    b[21][23]=32;

    b[13][31]=12;///a5)
    b[31][13]=12;
    b[13][32]=23;///b5)
    b[32][13]=23;
    b[13][33]=23;///c5)
    b[33][13]=23;
    b[13][23]=33;///d5)
    b[23][13]=33;
    b[13][12]=11;///e5)
    b[12][13]=11;
    b[13][11]=12;///f5)
    b[11][13]=12;
    b[13][21]=12;///g5)
    b[21][13]=12;

    b[12][31]=21;///a6)
    b[31][12]=21;
    b[12][32]=23;///b6)
    b[32][12]=23;
    b[12][33]=23;///c6)
    b[33][12]=23;
    b[12][23]=13;///d6)
    b[23][12]=13;
    b[12][13]=11;///e6)
    b[13][12]=11;
    b[12][11]=13;///f6)
    b[11][12]=13;
    b[12][21]=11;///g6)
    b[21][12]=11;

    b[11][31]=21;///a7)
    b[31][11]=21;
    b[11][32]=21;///b7)
    b[32][11]=21;
    b[11][33]=21;///c7)
    b[33][11]=21;
    b[11][23]=12;///d7)
    b[23][11]=12;
    b[11][13]=12;///e7)
    b[13][11]=12;
    b[11][12]=13;///f7)
    b[12][11]=13;
    b[11][21]=31;///g7)
    b[21][11]=31;

    b[21][31]=11;///a8)
    b[31][21]=11;
    b[21][32]=31;///b8)
    b[32][21]=31;
    b[21][33]=32;///c8)
    b[33][21]=32;
    b[21][23]=12;///d8)
    b[23][21]=12;
    b[21][13]=12;///e8)
    b[13][21]=12;
    b[21][12]=11;///f8)
    b[21][12]=11;
    b[21][11]=31;///g8)
    b[11][21]=31;




}

Nivel_4::Afisare()
{
    for(i=1; i<=3; i++)
    {
        if(i>1)
            cout<< "-----"<<endl;
        for(j=1; j<=3; j++)
            if(j<=2)
                cout << a[i][j]<<"|";
            else
                cout<<a[i][j]<<endl;

    }
    /*
    cout<<endl;
    cout<<"Apasa pe Q pentru a parasi nivelul !"<<endl;
    */
}

Nivel_4::Pune_random_O()
{
    for(i=1; i<=3; i++)
        for(j=1; j<=3; j++)
            if(a[i][j]=='#'&&blocare==0)
            {
                a[i][j]='O';
                blocare++;
            }
}
